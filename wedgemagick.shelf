<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="wedgemagick" label="Wedge Magick" icon="NETWORKS_top">
    <script scriptType="python"><![CDATA[import time, random, string
mouse_pos = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).cursorPosition()
random.seed(time.time())
randomcolorc = hou.Color(1.0,1.0,1.0)
randomcolorn = hou.Color(1.0,1.0,1.0)
hue = random.random()*360
randomcolorn.setHSV((hue,0.8,1.0))
randomcolorc.setHSV((hue,0.5,1.0))
rawin = hou.ui.readInput("Name of the Wedge Atrribute",title="cache dialog")
if len(rawin[1])==0:
    letters = string.ascii_letters
    title=''.join(random.choice(letters) for i in range(16))
else:
    title = rawin[1]

current = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()
nodes = hou.selectedNodes()
hou.clearAllSelected()
fcache = 0
nullno = 0
if len(nodes)>1:
    title+="_001"
if len(nodes)==0:
    fcache = current.createNode('filecache::2.0',node_name=title)
    fcache.setSelected(True)
    fcache.setColor(randomcolorc)
    fcache.setPosition(mouse_pos)
    fcache.parm("loadfromdisk").set(1)
    fcache.parm("filemethod").set(1)
    fcache.parm("file").set("$HIP/cache/"+title+"/`P@wedgeindex`/`P@wedgeindex`_$F4.bgeo.sc")
    #fcache.parm("basename").set("$OS")
    #fcache.parm("basedir").set("$HIP/cache/`P@"+title+"`")
    
    nullno = current.createNode('null',node_name="OUT_"+title)
    nullno.setInput(0,fcache)
    nullno.moveToGoodPosition(move_inputs=False)
    nullno.setSelected(True)
    nullno.setColor(randomcolorn)
for node in nodes:
    fcache = node.parent().createNode('filecache::2.0',node_name=title)
    fcache.setInput(0,node)
    fcache.moveToGoodPosition(move_inputs=False)
    fcache.setSelected(True)
    fcache.setColor(randomcolorc)
    fcache.parm("loadfromdisk").set(1)
    fcache.parm("filemethod").set(1)
    fcache.parm("file").set("$HIP/cache/"+title+"/`P@wedgeindex`/`P@wedgeindex`_$F4.bgeo.sc")
    #fcache.parm("basename").set("$OS")
    #fcache.parm("basedir").set("$HIP/cache/`P@"+title+"`")
    
    nullno = node.parent().createNode('null',node_name="OUT_"+title)
    nullno.setInput(0,fcache)
    nullno.moveToGoodPosition(move_inputs=False)
    nullno.setSelected(True)
    nullno.setColor(randomcolorn)
topnet = current.createNode('topnetmgr',node_name=title+"_TOPNET")
topnet.setPosition(fcache.position()+hou.Vector2(5.0,0.0))

wedge = topnet.createNode('wedge',node_name=title+"_wedge")
wedge.moveToGoodPosition()
wedge.parm("wedgeattributes").set(1)
wedge.parm("name1").set(title)

ropfetch1 = topnet.createNode('ropfetch',node_name=title+"_ropfetch_1")
ropfetch1.parm("roppath").set("../../"+title+"/render")
ropfetch1.parm("roporder").set(0)
ropfetch1.parm("framegeneration").set(1)
ropfetch1.parm("batchall").set(1)
ropfetch1.parm("range1").deleteAllKeyframes()
ropfetch1.parm("range2").deleteAllKeyframes()
ropfetch1.parm("range1").setExpression("ch(\"../../"+title+"/f1\")")
ropfetch1.parm("range2").setExpression("ch(\"../../"+title+"/f2\")")
ropfetch1.parm("range3").setExpression("ch(\"../../"+title+"/f3\")")
ropfetch1.setInput(0,wedge)
ropfetch1.moveToGoodPosition()

opengl = topnet.createNode('ropopengl',node_name=title+"_opengl")
opengl.setInput(0,ropfetch1)
opengl.moveToGoodPosition()
opengl.parm("picture").set("$HIP/cache/"+title+"/`P@wedgeindex`/`P@wedgeindex`_$F4.png")
opengl.parm("framegeneration").set(1)
opengl.parm("usefiletag").set(1)
opengl.parm("f1").deleteAllKeyframes()
opengl.parm("f2").deleteAllKeyframes()
opengl.parm("f1").setExpression("ch(\"../../"+title+"/f1\")")
opengl.parm("f2").setExpression("ch(\"../../"+title+"/f2\")")
opengl.parm("f3").setExpression("ch(\"../../"+title+"/f3\")")
opengl.parm("forceobjects").set("/obj/"+title+"_PREVIEW")
opengl.parm("vobjects").set("")

geo = hou.node("/obj").createNode("geo",node_name=title+"_PREVIEW")
geo.setGenericFlag(hou.nodeFlag.Display,False)
geo.setGenericFlag(hou.nodeFlag.Selectable,False)

merge = geo.createNode("object_merge",node_name=title+"_MERGE")
merge.parm("objpath1").set(nullno.path())

imagemagick1 = topnet.createNode('imagemagick',node_name=title+"_LABEL")
imagemagick1.setInput(0,opengl)
imagemagick1.parm("operation").set(1)
imagemagick1.parm("imagemagickbinary").set(2)

imagemagick1.parm("extraargs").set(2)

imagemagick1.parm("argumentname1").set("pointsize")
imagemagick1.parm("valuetype1").set(2)
imagemagick1.parm("customvalue1").set("40")

imagemagick1.parm("argumentname2").set("gravity")
imagemagick1.parm("valuetype2").set(2)
imagemagick1.parm("customvalue2").set("Center -fill white label:'`@wedgeattribs`: `@"+title+"`' -append")

imagemagick1.parm("outputfilepath").set("$HIP/cache/"+title+"/`P@wedgeindex`_labeled/`P@wedgeindex`_labeled_$F4.png")
imagemagick1.moveToGoodPosition()

partition = topnet.createNode('partitionbyframe',node_name=title+"_PARTITION")
partition.setInput(0,imagemagick1)
partition.moveToGoodPosition()

imagemagick2 = topnet.createNode('imagemagick',node_name=title+"_COMP")
imagemagick2.setInput(0,partition)
imagemagick2.parm("outputfilepath").set("$HIP/cache/"+title+"/"+title+"_comp/"+title+"_comp_$F4.png")
imagemagick2.parm("imagemagickbinary").set(2)
imagemagick2.moveToGoodPosition()

waitforall = topnet.createNode('waitforall',node_name=title+"_WAIT")
waitforall.setInput(0,imagemagick2)
waitforall.moveToGoodPosition()

ffmpeg = topnet.createNode('ffmpegencodevideo',node_name=title+"_H264")
ffmpeg.setInput(0,waitforall)
ffmpeg.moveToGoodPosition()
ffmpeg.parm("framelistfile").set("$HIP/cache/"+title+"/"+title+"_comp/"+title+"_framelist.txt")
ffmpeg.parm("outputfilepath").set("$HIP/cache/"+title+"/"+title+"_comp/"+title+".mp4")
ffmpeg.parm("fps").set(25)
ffmpeg.parm("enablesize").set(1)
ffmpeg.parm("size").set("3840x2160")
ffmpeg.parm("enablemovflags").set(0)
ffmpeg.parm("enablepixelformat").set(0)
ffmpeg.parm("enablecolorrange").set(0)
ffmpeg.parm("enablecolorspace").set(0)
ffmpeg.parm("enablecolorprimaries").set(0)
ffmpeg.parm("enablecolortrc").set(0)
ffmpeg.parm("enableexrcolortrc").set(0)]]></script>
  </tool>
</shelfDocument>
